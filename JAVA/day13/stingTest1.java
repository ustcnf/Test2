/* 1，模拟一个trim方法，去除字符串两端的空格。
	思路：
	1，判断字符串第一个位置是否是空格，如果是继续向下判断，直到不是空格为止。
		结尾处判断空格也是如此。
	2，当开始和结尾都判断到不是空格时，就是要获取的字符串。 
*/

class stringTest
{
	public static void sop(String str)
	{
		System.out.println(str);
	}
	public static void main(String [] args)
	{
		/*`Test 2 
		String s = "    sfasdfasdf  asdfd    "; */
		String s = "abkkcdkkefkkskk";
		sop("("+ s + ")");
		/* Test 1
		s = myTrim(s); */
		/* Test 2
		s = myReverse(s); */
		
		int t = myCount2(s, "kk");
		sop("("+ t + ")");
		sop("("+ s + ")");
	}
	public static String myTrim(String str)
	{
		int start = 0, end = str.length() - 1;
		while(start <= end && str.charAt(start) == ' ')
		{
			start++;
		}
		while(start <= end && str.charAt(end) == ' ')
		{
			end--;
		}
		return str.substring(start, end + 1);
	}
	
/* 2，将一个字符串进行反转。将字符串中指定部分进行反转，"abcdefg";abfedcg
	思路：
	1，曾经学习过对数组的元素进行反转。
	2，将字符串变成数组，对数组反转。
	3，将反转后的数组变成字符串。
	4，只要将或反转的部分的开始和结束位置作为参数传递即可。
 */
 
	public static String myReverse(String str)
	{
		char[] chs = str.toCharArray();
		reverse(chs);
		return new String(chs);
		
	}
	private static void reverse(char[] arr)
	{
		for(int start = 0, end = arr.length - 1; start < end; start++, end--)
		{
			swap(arr, start, end);
		}
	}
	private static void swap(char[] arr, int start, int end)
	{
		char temp;
		temp = arr [start];
		arr[start] = arr [end];
		arr [end] = temp;
		/* arr[start] = arr[start] ^ arr[end];
		arr[end] = arr[start] ^ arr[end];
		arr[start] = arr[start] ^ arr[end]; */
		
	}
	
	/*
3，获取一个字符串在另一个字符串中出现的次数。
	"abkkcdkkefkkskk"


	思路：
	1，定义个计数器。
	2，获取kk第一次出现的位置。
	3，从第一次出现位置后剩余的字符串中继续获取kk出现的位置。
		每获取一次就计数一次。
	4，当获取不到时，计数完成。



*/
	public static int myCount(String s, String sub)
	{
		int count = 0;
		int index = 0;
		while((index = s.indexOf(sub)) != -1)
		{
			count++;
			s = s.substring(index + sub.length());
		}
		return count;
	}
	public static int myCount2(String s, String sub)
	{
		int count = 0;
		int index = 0;
		while((index = s.indexOf(sub, index)) != -1)
		{
			index = index + sub.length();
			count++;
		}
		return count;
	}
	
	/*
4，获取两个字符串中最大相同子串。第一个动作：将短的那个串进行长度一次递减的子串打印。
	"abcwerthelloyuiodef"
	"cvhellobnm"
	思路：
		1，将短的那个子串按照长度递减的方式获取到。
		2，将每获取到的子串去长串中判断是否包含，
			如果包含，已经找到！。
*/
	
	public static String myGetSubstring(String s1, String s2)
	{
		String max = "", min = "";
		max = (s1.length() > s2.length()) ? s1 : s2;
		min = (max == s1) ? s2 : s1;
		for(int x = 0; x <= min.length() - 1; x ++)
		{	
			for(int y = 0, int z = min.length() -1 - x; z <= min.length() - 1; y++, z++)
			{
				String temp = min.substring(y, z);
				if(max.contains(temp);
				return temp;
			
			}
		}
		return "";
			
			
		
	}
}
	

 
 